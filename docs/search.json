{
  "articles": [
    {
      "path": "contact.html",
      "title": "Adam Loy",
      "author": [],
      "contents": "\n\n          \n          \n          Stat 220, Fall 2021\n          Resources\n          GitHub\n          Moodle\n          Slack\n          \n          \n          ☰\n          \n          \n      \n        \n          \n            \n              \n            \n              Adam Loy\n            \n            \n              \n                \n                    \n                      \n                        GitHub\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Email\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            \n            Bio\n            . Currently I work on the Oculus team at Facebook. I love talking about baseball, true crime podcasts, and causal inference.\n            \n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Adam Loy\n            \n            \n              \n                \n                                    \n                    \n                      GitHub\n                    \n                  \n                                    \n                    \n                      Email\n                    \n                  \n                                  \n              \n            \n            \n              \n              Bio\n              . Currently I work on the Oculus team at Facebook. I love talking about baseball, true crime podcasts, and causal inference.\n              \n            \n        \n      \n    \n\n    \n    \n    ",
      "last_modified": "2021-10-04T08:09:01-05:00"
    },
    {
      "path": "github_stat220.html",
      "title": "GitHub Classroom Guide for Stat 220",
      "description": "This guide will help you setup Git and GitHub for use in Stat 220.\n",
      "author": [],
      "contents": "\n\nContents\nOverview\nGetting setup with Git and GitHub\nIndividual assignments\nGroup work\nAdditional resources\nAcknowledgements\nReuse\n\nOverview\nIf you are using the maize RStudio server, then you can connect to GitHub without any extra software downloads. If you are using RStudio on your computer, then you will need to download Git software (as directed in Software in Stat 220) to use GitHub connected projects.\nI will host all of our course materials on GitHub, and you will use GitHub to submit homework and collaborate on projects.\nGetting setup with Git and GitHub\nIf you are not working on the maize RStudio server, then make sure that you have installed all of the software mentioned in Software in Stat 220. In addition, you should install the usethis and gitcreds R packages.\nEveryone needs to connect Git and GitHub by doing the following:\nRegister for account on GitHub (https://github.com/). I recommend using a username that incorporates your name (e.g., aloy). Please use your Carleton email with this account.\nSetup options in Git by running the following code chunk in your console:\nlibrary(usethis)\nuse_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\")\nchanging the first two lines to your own name and email (this should be the email associated with your GitHub account).\n(Optional) This step explains how to use GitHub on RStudio without having to enter your password every time to connect. This is an optional step since you can still use GitHub without setting up a SSH key or caching credentials, you will just need to enter your password every time you push or pull with GitHub. Pick one method below: cache credentials for HTTPS or SSH. GitHub recommends HTTPS, so I recommend trying that first.\nStrongly recommended: Cache credential using a HTTPS linked project.\nComplete the steps in Section 10.1 of Happy Git with R to get a personal access token (you will need to install the usethis package first). Then, follow the directions in Section 10.2.1 of Happy Git with R (I’ve had good luck with the gitcreds package, and it is installed on maize.)\nA second method is to generate a SSH key. First check to see if you have a SSH key. Go into the shell (again, through RStudio Tools -> Shell) and complete on this page http://happygitwithr.com/ssh-keys.html, which is Chapter 11 in Happy Git with R.\n\n(optional) Follow the instructions here (http://happygitwithr.com/push-pull-github.html) to ensure you can connect to GitHub from your computer. If you can’t get this command line push/pull to work that is fine. Try connecting to GitHub via RStudio, as detailed next. If you can’t connect via RStudio then talk to me in student hours.\nIndividual assignments\nIf you followed the suggestions in the Using Rstudio in Stat 220 page, then you should already have an assignments folder on your computer or maize account.\nEach new assignment/project will be posted as a repository on GitHub and added directly to your account (within the Stat220 organization). This repository will contain assignment details (README, .Rmd).\nCreating an individual assignment repo and project\nGo to our course GitHub organization page (https://github.com/stat220-fa21) and find your homework repo, such as hw-1-username (where your username is attached).\nEnter the online assignment repository on GitHub. Click the green “Code” button. Most of you should just use the default setting which is to “clone” (copy) using HTTPS. Click the clipboard to the right of the URL to copy the repo location. (If you are using SSH, make sure it says “Clone with SSH” in bold in the top left of the pop-up box. If not, click the “SSH” button and copy the link in the box to your clipboard.)\nNow open up RStudio and create a project as follows:\nClick the Project button in the upper right corner of your RStudio window and select New Project….\n\n \n\n\n\nSelect Version Control and then New Project\n\n\n\nPaste the link you just copied into the Repository URL box. Leave the Project directory name blank (or keep the auto-filled name). Use the Browse button to find your assignments folder, then click Create Project\n\n\n\n   \nWarning: If you received an error in the above steps, you may have to clone with HTTPS instead of SSH (or vice versa). You can do this by again clicking on the “Clone or Download” button in the repository page, then clicking “Use HTTPS” in the top right of the pop-up box. Now copy the link and repeat this step.\nWorking on your assignment\nAn RStudio project should now open, which will allow you to start working on your homework assignment. You should see the project assignment name in the top right side of Rstudio. You will probably see a blank console screen when you open a new project. Look in the Files tab for your homework .Rmd file. Click on whatever file you want to edit (probably the .Rmd file) and edit away. Make sure that your current assignment’s project is the one open and showing in the upper rightproject name. To open a project, click on the .Rproj file or use the Open Project… option available in the upper right project link.\nCommits\nAfter you make changes to the homework assignment, commit them. What are commits you ask? Commits are essentially taking a snapshot of your projects. Commits save this snapshot to your local version of Git (located on your hard drive or the maize server). For example, if I make changes to a code so that it prints “Hello world”, and then commit them with an informative message, I can look at the history of my commits and view the code that I wrote at that time. If I made some more changes to the function that resulted in an error, I could go back to the commit where the code was originally working. This prevents you from creating several versions of your homework (homework-v1, homework-v2, …) or from trying to remember what your code originally looked like.\nYou can make commits in the Git tab in RStudio.\n\n\n\nClick the Commit button in the Git tab. Check the boxes of the files that you want to commit, enter your commit message (briefly state what changes have been made), then hit Commit. You can read how to do this in RStudio in more detail here: http://r-pkgs.had.co.nz/git.html#git-commit.\nTwo things about committing.\nYou should commit somewhat frequently. At minimum, if you’re doing a homework assignment, you should make a commit each time that you’ve finished a question.\nLeave informative commit messages. “Added stuff” will not help you if you’re looking at your commit history in a year. A message like “Added initial version of hello-world function” will be more useful.\nPushing changes to Github\nAt some point you’ll want to get the updated version of the assignment back onto GitHub, either so that we can help you with your code or so that it can be graded. You will also want to push work frequently when you have a shared GitHub repo for project collaborations (i.e. more than one person is working on a project and code). If you are ready to push, you can again click on the “Up” Push arrow in the Git tab or in the Commit pop-up window or in the Git tab (shown above).\nTo “turn in” an assignment, all you need to do is push all your relevant files to Github by the deadline.\nGroup work\nCollaborative Github assignments are pretty similar to individual assignments.\nCreating a group/partner assignment repo and project\nGo to our course GitHub organization page(https://github.com/stat220-fa21) and find the repo for your group, for example if your group name is “team01” the you might find the mp1-team01 repo. Clone this repo to your computer/maize account using the same steps done for an individual assignment (see steps 2-3).\nWorking with collaborative repos\nFor group homework, I suggest that only the recorder edit the group-homework-x.Rmd file to avoid merge conflicts! Other group members can create a new Markdown doc to run and save commands. Only the recorder needs to push changes (answers) to the Github repo and all others can then pull these changes (i.e. the final answers) after the HW is submitted.\nWhen you are working together on a Github project, you should commit and push your modifications frequently. You will also need to frequently pull updates from Github down to your local version of RStudio. These updates are changes that your teammates have made since your last pull. To pull in changes, click the “Down” Pull arrow in the Git tab (shown above).\nIf you get an error about conflict after pulling or pushing, don’t freak out! This can happen if you edit a file (usually an .Rmd or .R file) in a location that was also changed by a teammate. When this happens you should attempt to fix the merge conflict. Take a look at this resource site and try to fix the merge conflict in Rstudio. Katie also created a diagram shown below that “explains” how and when conflicts will likely happen and how you can resolve the problems in Rstudio. If that doesn’t work contact me!\n\n\n\nAdditional resources\nHappy Git and GitHub for the useR\nRstudio, Git and GitHub\nInteractive learning guide for Git\nGitHub Guides\nGit setup for Windows (video)\nGit setup for Mac (video)\nHow to clone, edit, and push homework assignments with GitHub Classroom (video)\nAcknowledgements\nMost of this content in this guide was taken from https://github.com/jfiksel/github-classroom-for-students and edited for our classroom use.\nReuse\nThis guide is licensed under the CC BY-NC 3.0 Creative Commons License.\n\n\n\n",
      "last_modified": "2021-10-04T08:09:01-05:00"
    },
    {
      "path": "homework.html",
      "title": "Assignments in Stat 220",
      "description": "Homework guidelines for Stat 220.\n",
      "author": [],
      "contents": "\nDo’s and Don’t of collaboration\nYou can discuss homework problems with classmates but you must write up your own homework solutions and do your own work in R (no sharing commands or output).\nDo not share R commands/code in any way, including, but not limited to, sending commands via email, slack, text, or showing commands in a shared screen with the intention of showing a classmate your solution to a problem.\nYou can share a screen to help troubleshoot a coding problem in R.\n\nYou can use the following resources to complete your homework:\nCarleton faculty (me, other stats faculty, etc.)\ndiscussions with classmates (see above) or knowledgeable friends\nCarleton resources like stats lab assistants\nstudent solutions provided in the back of your student textbook or in the student solution manual.\nGoogle search results that help your troubleshoot a problem (e.g., general code questions, not specific homework solutions).\n\nYou cannot use any resources other than the ones listed above to complete assignments (homework, mini project, etc.) for this class. (e.g., you cannot use a friend’s old assignments, textbook (instructor) solutions manual, etc.)\nExamples that violate the academic integrity policy\nsending your .Rmd homework file to another person in the class\nreceiving an .Rmd homework file from another person\nsharing a screen and copying code, verbatim, from another person\nsending/receiving R commands\nneglecting to acknowledge classmates with whom you worked with on an assignment\nFormat and Content\nSubmit via GitHub (for most assignments) an organized and correctly ordered assignment.\nContent: Good data scientists need to do more than just write code; they should be able to interpret and explain their analyzes.\nProvide a written answer first, followed by any required R code and output.\nUse complete sentences when answering any problem that requires an explanation or overall problem summary.\n\nWhen including code:\nBe sure to show the natural sequence of work needed to answer the problem.\nInclude brief comments explain your code steps.\nDo not include typos or unnecessary commands/output.\nAlways include code output.\n\nAt the top of each individual assignment include the names of classmates that you worked with on all or part of the assignment (but each person must write up their assignment on their own)\nAccommodations: Carleton College is committed to providing equitable access to learning opportunities for all students. The Office of Accessibility Resources (Henry House, 107 Union Street) is the campus office that collaborates with students who have disabilities to provide and/or arrange reasonable accommodations. If you have, or think you may have, a disability (e.g., mental health, attentional, learning, autism spectrum disorders, chronic health, traumatic brain injury and concussions, vision, hearing, mobility, or speech impairments), please contact OAR@carleton.edu or call Sam Thayer (’10), Director of the Office of Accessibility Resources (x4464), to arrange a confidential discussion regarding equitable access and reasonable accommodations.\nAcademic Honesty: All work that you turn in under your name must follow Carleton’s academic integrity policy. The use of textbook solution manuals (physical or online solutions), homework, projects or exams done by past students are not allowed. Look at the College’s Writing Across the Curriculum website for additional guidance on plagiarism and how to avoid plagiarism in their writing.\n\n\n\n",
      "last_modified": "2021-10-04T08:09:02-05:00"
    },
    {
      "path": "index.html",
      "title": "Course materials and schedule",
      "description": "Announcements and upcoming deadlines\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-10-04T08:09:03-05:00"
    },
    {
      "path": "resources.html",
      "title": "Resources",
      "description": "Here are some great resources to help answer your questions about\nthe course, Git, GitHub, and R.\n",
      "author": [],
      "contents": "\n\nContents\nEssential course information\nHomework solutions\nQuiz materials\nReadings\nR guides\nGit/GitHub guides\n\nEssential course information\nSyllabus\nHomework guidelines\nToken spending form\nSchedule an appointment\nSoftware for Stat 220\nCaching your PAT for GitHub\nUsing Git and GitHub in Stat 220\nUsing Rstudio in Stat 220\nHomework solutions\nHomework 3 solution\nHomework 2 solution\nQuiz materials\nOld ggplot2 questions\nReadings\nThere’s no perfect textbook for data science, so readings will come from a variety of sources including:\nR for Data Science\nIntroduction to Data Science (Timbers, Campbell, Lee)\nIntroduction to Data Science (Irizarry)\nFundamentals of Data Visualization\nAn Introduction to Statistical Learning\nR guides\nRStudio has created some excellent cheat sheets that I often have on my desk\nRStudio IDE\ndynamic documents with rmarkdown\ndata visualization with ggplot2\ndata transformations with dplyr\ndata tidying with tidyr\ndata import with readr, readxl, and googlesheets4\napply functions with purrr\nstringr manipulation with stringr\nfactors with forcats\ndates and time with lubridate\ninteractive web apps with shiny\nGit/GitHub guides\nHappy Git and GitHub for the useR - the essential guide for using Git/GitHub with R/RStudio\n\n\n\n",
      "last_modified": "2021-10-05T12:26:18-05:00"
    },
    {
      "path": "rstudio_stat220.html",
      "title": "Using RStudio in Stat 220",
      "description": "Suggested file organization, RStudio project basics, and RStudio best practices for Stat 220.\n",
      "author": [],
      "contents": "\n\nContents\nKey idea: Make a Stat220 folder\nFile organization: Using maize\nFile organization: Using your own Rstudio install\nRStudio projects\nBest practices (or what not to do)\nAcknowledgments\nReuse\n\nKey idea: Make a Stat220 folder\nThere will be a lot of Rstudio content thrown your way this term, most in the form of .Rmd Markdown files. To stay organized, I strongly suggest you create a stat220 folder that contains the following subfolders:\nstat220 folder\nAssignments: This folder will contain subfolders for each assignment. Each assignment subfolder (e.g. homework1, homework2, …) will be a Github connected RStudio project that you will create once an assignment is posted.\nContent: This folder should be used to save any non-assignment files (e.g. slides, examples) for this class. You will create this subfolder by creating an RStudio project (see step 5 below).\n\nTo get started with this organization, follow the steps below.\nFile organization: Using maize\nThe server (online) version of Rstudio is run from a unix server. You can navigate this file system using unix commands, but I assume that most or all of you will just use Rstudio to access your files on this server.\n1. In Rstudio, click the Files tab in the lower righthand window. Note: this is not the same as the File menu option.\n\n\n\n2. Verify that you are in your HOME folder (should simply say Home right under the New Folder button). To navigate to your Home folder (if somehow you are not in it), click the … button (far right side of the Files tab) and enter a ~ (tilde) symbol\n\n\n\n3. Click the New Folder button and name the folder stat220.\n\n\n\n4. Click on this newly created (empty) stat220 folder. Within the folder create another New Folder and name it assignments.\n\n\n\n5. Within the stat220 folder, create an RStudio project called content with the following steps:\na. Click the Project button in the upper right corner of your RStudio window and select New Project….\n\n\n\nb. Select New Directory and then New Project\n\n\n\nc. Enter content as the Directory name and use the Browse button to find your stat220 folder. Then click Create Project.\n\n\n\nd. You should now have a new folder called content in your stat220 folder and this folder will contain an RStudio project .Rproj. Feel free to add subfolders to this content folder (e.g. slides, examples, etc).\n\n\n\nWarning: Do not create an RStudio project in the main stat220 folder because it is not good practice to have RStudio projects in subfolders of another project (e.g. a project within a project is not recommended).\nFile organization: Using your own Rstudio install\nCreate a folder called stat220 somewhere on your computer. Within this folder create an assignments subfolder. Then complete step 5 from above to create a content RStudio project folder.\nRStudio projects\nOnce you’ve created a project, your R session should be running within that project folder. You can check which project you are in by checking the project name in the upper right part of your RStudio window. Here we see the content project is open:\n\n\n\nRunning R from an RStudio project sets your working directory to the project folder:\n\n\n\nThis allows for easy file path access to all files related to this project.\nTo start a project, click on the .Rproj file or use the Open Project… option shown in step 5 above.\nBest practices (or what not to do)\nNever save files to a lab computer hard drive (e.g. desktop, downloads, etc). They will be erased when you log off.\nDo not use gmail as a file storage system! Avoid emailing yourself files that you created (and saved) on a lab computer. Eventually you will lose work this way.\nAvoid using online versions of google drive and dropbox. Similar to gmail, downloading, editing a doc, then uploading it back to drive/dropbox is another great way to lose work.\nAvoid this, this, and this.\nAcknowledgments\nThis installation guide is based on the guide from Katie St. Clair\nReuse\nText and figures are licensed under Creative Commons Attribution CC BY-NC 3.0.\n\n\n\n",
      "last_modified": "2021-10-04T08:09:04-05:00"
    },
    {
      "path": "setup_github.html",
      "title": "Cache credentials for RStudio and GitHub",
      "description": "This is a brief overview of how to store your GitHub PAT so that\nyou can more easily work with GitHub via RStudio. \n",
      "author": [],
      "contents": "\nAfter you have signed up for a GitHub account and gone through all of the account verification steps, you will need to generate a personal access token (PAT) and let R know what that is. To do this, I suggest following these steps:\nSetup options in Git by running the following code chunk in your console:\n\n\nlibrary(usethis)\n use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\")\n \n\n\nchanging the first two lines to your own name and email (this should be the email associated with your GitHub account).\nNext, you should generate a PAT:\n\n\ncreate_github_token()\n \n\n\nThis function will preselect the recommended scopes. I recommend just clicking “Generate token” unless you know of a reason to tweak the scopes. Store this token somewhere, because you’ll never be able to see it again once you leave that page or close the window. Treat this PAT like a password.\nNow that you have credentials, you need to store them. I recommend using the {gitcreds} package. Run the below chunk (after installing the package if you’re using your own laptop):\n\n\nlibrary(gitcreds)\n gitcreds_set()\n \n\n\nRespond to the prompt with your personal access token (PAT).\nYou should be setup! Try to clone a GitHub project and talk to me if you still hit issues.\nAcknowledgments\nThese are adapted from Jenny Bryan’s recommendations in chapter 10 of Happy Git and GitHub for the useR. As such, this work is is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\n\n\n\n",
      "last_modified": "2021-10-04T08:09:05-05:00"
    },
    {
      "path": "software.html",
      "title": "Software in Stat 220",
      "description": "This guide describes the key software we will use this term\nin Stat 220.\n",
      "author": [],
      "contents": "\n\nContents\nR/RStudio\nGit and GitHub\nSlack\nLaTeX\nPanopto\nAcknowledgements\nResuse\n\nR/RStudio\nThe use of the R programming language with the RStudio interface is an essential component of this course. You have two options for using RStudio:\nThe server version of RStudio on the web at (https://maize.mathcs.carleton.edu). The advantage of using the server version is that all of your work will be stored in the cloud, where it is automatically saved and backed up. This means that you can access your work from any computer on campus using a web browser. The downside is that you have to share limited computational resources with each other! This limitation is especially pronounced this term when classes are being taught remotely. We are unsure what type of load will be placed on maize, so if you can download a local version of R and RStudio, I recommend you do so. Use your Carleton credentials to access your account and you need to be running the Carleton VPN (below) to access this server.\nA local version of RStudio installed on your machine. This option is highly recommended due to the computational resources this course demands. The downside to this approach is that your work is only stored locally, but I get around this problem by keeping all of my work on GitHub. You will learn how to use GitHub throughout the course. Both R and RStudio are free and open-source.\nInstalling R/RStudio (not needed if you are using the maize server)\nDownload the latest version of R: https://cran.r-project.org/\nDownload the free Rstudio desktop version: https://www.rstudio.com/products/rstudio/download/\nUse the default download and install options for each. For R, download the “precompiled binary” distribution rather than the source code\nUpdating R/RStudio (not needed if you are using the maize server)\nIf you have used a local version of R/RStudio before and it is still installed on your machine, then you should make sure that you have the most recent versions of each program.\nTo check your version of R, run the command getRversion() and compare your version to the newest version posted on https://cran.r-project.org/. If you need an update, then install the newer version using the installation directions above.\nIn RStudio, check for updates with the menu option Help > Check for updates. Follow directions if an update is needed.\nDid it work? (A sanity check after your install/update)\nDo whatever is appropriate for your operating system to launch RStudio. You should get a window similar to the screenshot you see here, but yours will be more boring because you haven’t written any code or made any figures yet!\nPut your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object with code like x <- 2 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 8 printed. If this happened, you’ve succeeded in installing R and RStudio!\nGit and GitHub\nGit is version control software that you install locally on your computer. Git is already installed on the maize RStudio server.\nGithub is a cloud-based service for hosting git projects. It allows multiple users to share and contribute to projects and it is how you will be submitting homework assignments and projects for this class. More information about Github for this class is found in Getting setup with Git and GitHub.\nIf you are using a local install of R/RStudio, then you will need to install Git.\nInstalling Git\nDirections for both Windows & Mac here: http://happygitwithr.com/install-git.html.\nIf you are using maize, then there is nothing you need to install.\nWindows users should follow Option 1 in 6.2.\nMac users can follow Option 1 in 6.3 if comfortable, otherwise follow Option 2\nLinux users can follow 6.4.\nSlack\nWe will use Slack for all course communication. Sign up for our course Slack team here! You will need to create an account with a username, and log in to read and post. You can use Slack right from a web browser, or you can download a standalone Slack application to your Mac, Windows, Linux and/or Android/iOS device. You can control whether you receive notifications on new posts by going to Preferences, as well as decide which ‘channels’ to subscribe to. A ‘channel’ is a discussion thread, which is used to organize communications into topics. You can learn more about Slack features here.\nSeveral channels have been set up for specific parts of the course. Feel free to ask questions anytime. You can browse the available channels in our team by clicking on “Channels” on the left-hand panel.\nThere is also an #anonymous channel that you can use if you’d like to ask a question or provide a comment anonymously. To have a post appear anonymously in this channel, compose a direct message to yourself (by clicking on your username in the ‘Direct Messages’ menu on the left panel) that begins with /anon #anonymous your question. Then the text your question will be sent to the #anonymous channel by the anonymous bot. Zoom For synchronous class meeting and office hours we will use the Zoom video conferencing software. I recommend downloading the Zoom app for your operating system.\nLaTeX\nIf you want to render R Markdown documents to PDFs, then you need to install LaTeX. Below are the recommended installers for Windows and Mac:\nMacTeX for Mac (3.2GB)\nMiKTeX for Windows (190MB)\nAlternatively, you can install the tinytex R package by running install.packages(\"tinytex\") in the console.\nIf you are using maize, then there is nothing you need to install.\nPanopto\nAt some point in the course, you will need to create a screencast presenting results or demonstrating your data product. Carleton supports the Panopto software for this purpose. For more information, including an installation guide, check out this set of videos on Panopto.\nAcknowledgements\nThis installation guide is based on the guide from stat545.com.\nResuse\nThis work is licensed under the CC BY-NC 3.0 Creative Commons License.\n\n\n\n",
      "last_modified": "2021-10-04T08:09:05-05:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
